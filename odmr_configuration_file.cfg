#  Qudi configuration file for the new core.
#

global:
    # list of modules to load when starting
    startup: []

    # Module server configuration for accessing qudi GUI/logic/hardware modules from remote clients
    remote_modules_server:
        address: 'localhost'
        port: 12345

    # Server port for serving the active qudi module namespace locally (localhost).
    # Used by e.g. the Qudi jupyter kernel.
    namespace_server_port: 18861

    # If this flag is set (True), all arguments passed to qudi module APIs from remote
    # (jupyter notebook, qudi console, remote modules) will be wrapped and passed "per value"
    # (serialized and de-serialized). This is avoiding a lot of inconveniences with using numpy in
    # remote clients.
    # If you do not want to use this workaround and know what you are doing, you can disable this
    # feature by setting this flag to False.
    force_remote_calls_by_value: True

    # Qss stylesheet for controlling the appearance of the GUIs.
    # Absolute path or relative to qudi.artwork.styles
    stylesheet: 'qdark.qss'

    # Default root directory for measurement data storage. All eventual data sub-directories should
    # be contained within this directory. This is not enforced, just convention.
    # The fallback directory is <user home>/qudi/Data/
    # default_data_dir: C:\Users\neverhorst\qudi\Data
    # default_data_dir: 'C:\\Users\QT3\projects\qdl-qudi-experiments\qudi-data'

    # Save data to daily data sub-directories by default
    daily_data_dirs: True

gui:

    pulsed_odmr_gui:
        module.Class: 'odmr.pulsed.PulsedMeasurementGui'
        connect:
            odmr_logic: 'pulsed_odmr_master_logic'

    cw_odmr_gui:
        module.Class: 'odmr.odmrgui.OdmrGui'
        connect:
            odmr_logic: 'odmr_logic'


    time_series_gui:
          module.Class: 'time_series.time_series_gui.TimeSeriesGui'
          use_antialias: True  # optional, set to False if you encounter performance issues
          connect:
              _time_series_logic_con: 'time_series_reader_logic'

logic:

    pulsed_odmr_master_logic:
        module.Class: 'pulsed.pulsed_master_logic.PulsedMasterLogic'
        connect:
            pulsedmeasurementlogic: 'pulsed_odmr_measurement_logic'
            sequencegeneratorlogic: 'pulsed_odmr_sequence_generator_logic'


    pulsed_odmr_measurement_logic:
        module.Class: 'pulsed.pulsed_measurement_logic.PulsedMeasurementLogic'
        connect:
            fastcounter: <need>
            pulsegenerator: <need>
            microwave: mw_source_synthhd

    pulsed_odmr_sequence_generator_logic:
        module.Class: 'pulsed.pulsed_measurement_logic.SequenceGeneratorLogic'
        connect:
            pulsegnerator: <need>


    odmr_logic:
        module.Class: 'odmr_logic.OdmrLogic'
        connect:
            microwave: 'mw_source_synthhd' #this module does not control the synth USB II device. Need synthHD or write separate module for USB II.
            #microwave: 'mw_source_dummy'
            data_scanner: 'ni_finite_sampling_input'
        default_scan_mode: EQUIDISTANT_SWEEP #mw_source_synthhd doesn't support the default of JUMP_LIST

    time_series_reader_logic:
          module.Class: 'time_series_reader_logic.TimeSeriesReaderLogic'
          max_frame_rate: 10  # optional (10Hz by default)
          calc_digital_freq: True  # optional (True by default)
          connect:
              streamer: 'nicard_6343_instreamer'



hardware:
    mw_source_dummy:
        module.Class: 'dummy.microwave_dummy.MicrowaveDummy'

    mw_source_synthhd:
        module.Class: 'microwave.mw_source_windfreak_synthhdpro.MicrowaveSynthHDPro'
        #serial_port: 'COM5'
        serial_port: 'ASRL5::INSTR'
        comm_timeout: 10  # in seconds
        output_channel: 0  # either 0 or 1

    nicard_6343_instreamer:
        module.Class: 'ni_x_series.ni_x_series_in_streamer.NIXSeriesInStreamer'
        device_name: 'Dev1'
        digital_sources:  # optional
            - 'PFI0'
        #analog_sources:  # optional
        #    - 'ai0'
        #    - 'ai1'
        # external_sample_clock_source: 'PFI0'  # optional
        # external_sample_clock_frequency: 1000  # optional
        adc_voltage_range: [-10, 10]  # optional
        max_channel_samples_buffer: 10000000  # optional
        read_write_timeout: 10  # optional


    ni_finite_sampling_input:
        module.Class: 'ni_x_series.ni_x_series_finite_sampling_input.NIXSeriesFiniteSamplingInput'
        device_name: 'Dev1'
        digital_sources:  # optional
            - 'PFI0'
        digital_channel_units:  # optional
            'PFI0': 'c/s'
        analog_channel_units:  # optional
            'ai0': 'V'
            'ai1': 'V'
        # external_sample_clock_source: 'PFI0'  # optional
        # external_sample_clock_frequency: 1000  # optional
        adc_voltage_range: [-10, 10]  # optional
        max_channel_samples_buffer: 10000000  # optional
        read_write_timeout: 10  # optional
        #sample_clock_output: '/Dev1/PFI20'  # optional
